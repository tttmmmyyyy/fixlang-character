module Test; 
import Character;

test : IO ();
test = (
    // is_alnum
    assert_eq(|_|"is_alnum", is_alnum('A'), true);;
    assert_eq(|_|"is_alnum", is_alnum('0'), true);;
    assert_eq(|_|"is_alnum", is_alnum('+'), false);;

    // is_alpha
    assert_eq(|_|"is_alpha", is_alpha('A'), true);;
    assert_eq(|_|"is_alpha", is_alpha('0'), false);;
    assert_eq(|_|"is_alpha", is_alpha('+'), false);;

    // is_blank
    assert_eq(|_|"is_blank 1", is_blank('A'), false);;
    assert_eq(|_|"is_blank 2", is_blank('0'), false);;
    assert_eq(|_|"is_blank 3", is_blank(' '), true);;
    assert_eq(|_|"is_blank 4", is_blank('\t'), true);;
    assert_eq(|_|"is_blank 5", is_blank('\n'), false);;
    assert_eq(|_|"is_blank 6", is_blank('\r'), false);;

    // is_cntrl
    assert_eq(|_|"is_cntrl", is_cntrl('A'), false);;
    assert_eq(|_|"is_cntrl", is_cntrl('0'), false);;
    assert_eq(|_|"is_cntrl", is_cntrl('\0'), true);;
    assert_eq(|_|"is_cntrl", is_cntrl('\t'), true);;
    assert_eq(|_|"is_cntrl", is_cntrl('\n'), true);;
    assert_eq(|_|"is_cntrl", is_cntrl('\r'), true);;

    // is_digit
    assert_eq(|_|"is_digit", is_digit('0'), true);;
    assert_eq(|_|"is_digit", is_digit('9'), true);;
    assert_eq(|_|"is_digit", is_digit('+'), false);;

    // is_graph
    assert_eq(|_|"is_graph", is_graph('A'), true);;
    assert_eq(|_|"is_graph", is_graph('0'), true);;
    assert_eq(|_|"is_graph", is_graph(' '), false);;
    assert_eq(|_|"is_graph", is_graph('\n'), false);;
    assert_eq(|_|"is_graph", is_graph('\t'), false);;
    assert_eq(|_|"is_graph", is_graph('\0'), false);;

    // is_lower
    assert_eq(|_|"is_lower", is_lower('a'), true);;
    assert_eq(|_|"is_lower", is_lower('A'), false);;
    assert_eq(|_|"is_lower", is_lower('+'), false);;

    // is_print
    assert_eq(|_|"is_print", is_print('A'), true);;
    assert_eq(|_|"is_print", is_print('0'), true);;
    assert_eq(|_|"is_print", is_print(' '), true);;
    assert_eq(|_|"is_print", is_print('\n'), false);;
    assert_eq(|_|"is_print", is_print('\t'), false);;
    assert_eq(|_|"is_print", is_print('\0'), false);;

    // is_punct
    assert_eq(|_|"is_punct 1", is_punct('.'), true);;
    assert_eq(|_|"is_punct 2", is_punct(','), true);;
    assert_eq(|_|"is_punct 3", is_punct('+'), true);;
    assert_eq(|_|"is_punct 4", is_punct('A'), false);;
    assert_eq(|_|"is_punct 5", is_punct('0'), false);;

    // is_space
    assert_eq(|_|"is_space", is_space(' '), true);;
    assert_eq(|_|"is_space", is_space('\t'), true);;
    assert_eq(|_|"is_space", is_space('\n'), true);;
    assert_eq(|_|"is_space", is_space('\r'), true);;
    assert_eq(|_|"is_space", is_space('A'), false);;
    assert_eq(|_|"is_space", is_space('0'), false);;

    // is_upper
    assert_eq(|_|"is_upper", is_upper('A'), true);;
    assert_eq(|_|"is_upper", is_upper('a'), false);;
    assert_eq(|_|"is_upper", is_upper('+'), false);;

    // is_xdigit
    assert_eq(|_|"is_xdigit 1", is_xdigit('A'), true);;
    assert_eq(|_|"is_xdigit 2", is_xdigit('a'), true);;
    assert_eq(|_|"is_xdigit 3", is_xdigit('0'), true);;
    assert_eq(|_|"is_xdigit 4", is_xdigit('x'), false);;
    assert_eq(|_|"is_xdigit 5", is_xdigit('+'), false);;

    // to_lower
    assert_eq(|_|"to_lower 1", to_lower('A'), 'a');;
    assert_eq(|_|"to_lower 2", to_lower('a'), 'a');;
    assert_eq(|_|"to_lower 3", to_lower('+'), '+');;

    // to_upper
    assert_eq(|_|"to_upper 1", to_upper('A'), 'A');;
    assert_eq(|_|"to_upper 2", to_upper('a'), 'A');;
    assert_eq(|_|"to_upper 3", to_upper('+'), '+');;

    pure()
);